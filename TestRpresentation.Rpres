BeamerTest
========================================================
author: Garcia-Mendivil, Helio A.
date: `r format(Sys.time(), '%d %B, %Y')`
autosize: true
font-family: 'Helvetica'

```{r message=FALSE, warning=FALSE, include=FALSE}
library(readr)
library(mosaic)
library(FSA)
library(ggplot2)
library(readxl)
library(knitr)
library(doBy)
library(agricolae)
library(e1071)
library(MASS)
library ("stats")
library(sm)
library(xtable)
library(plotrix)
library(car)
library(scales)
library(data.table)

########## FUNCTIONS #######

# Function to round vectors

round_df <- function(x, digits) {
    # round all numeric variables
    # x: data frame 
    # digits: number of digits to round
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x
}

## Function for Tukey

He.Tukey<-function(Resp, Trat){
    anovaTrat <- anova(aov(Resp ~ Trat))
    PvalueanovaTrat <- anovaTrat$`Pr(>F)`[1]
    aovTrat <- aov(Resp ~ Trat)
    posthocTrat <- TukeyHSD(x=aovTrat, 'Trat', conf.level=0.95)
    posthocTratdf <- data.frame(posthocTrat$`Trat`)
    p.adjTrat <- posthocTratdf["p.adj"]
    p.adjTrat2 <- setDT(p.adjTrat, keep.rownames = TRUE)[]
    p.adjTrat3 <- p.adjTrat2[order(p.adjTrat2[,2])]
    p.adjTrat4 <-  data.frame(filter(p.adjTrat3,  p.adjTrat3$p.adj <=  0.05))
    colnames(p.adjTrat4) <- c("Combination", "P.adj")
    TukeyTrat <- round_df(p.adjTrat4, 4)
  return(TukeyTrat)
}

## function for dunn test

He.Dunn<-function(Resp, Trat){
    DT.Trat <- dunnTest(Resp ~ Trat, method="bonferroni")
    DT.Trat2 <- DT.Trat$res
    DT.Trat3 <- data.table(Combination = DT.Trat2$Comparison, P.adj = DT.Trat2$P.adj)
    DT.Trat4 <- DT.Trat3[order(DT.Trat3$P.adj)]
    DT.Trat5 <-  data.frame(filter(DT.Trat4,  DT.Trat4$P.adj <=  0.05))
    DT.Trat5$P.adj <- round_df(DT.Trat5$P.adj, 4)
    DunnTrat <- DT.Trat5
  return(DunnTrat)
}
############### Functions to plot ####
He.Plot2<-function(SData, Germ, Isolate, PlotTitle, yla, xla){
    SelDatagrouped <- group_by(SData, Germ, Isolate)
    SelDataFramed <- as.data.frame(SelDatagrouped)
    SelDataFramed$Germ <- as.factor(SelDataFramed$Germ)
    SelDataFramed$Isolate <- as.factor(SelDataFramed$Isolate)
    SelDataFramedPlusOne <- SelDataFramed 
    SelDataFramedPlusOne$EggsP <- SelDataFramedPlusOne$EggsP+1
blank <- ggplot(SelDataFramedPlusOne, aes(x =Isolate , y = EggsP, fill = Germ)) + theme_classic()
blank2 <- blank + labs(title= PlotTitle, y= yla, x= xla) 
blank2xy <- blank2 + theme(panel.grid.major.y = element_line(linetype = "dashed", colour = "grey90"), panel.grid.major.x = element_line(linetype = "dotted", colour = "grey90"), panel.grid.minor.x = element_line(linetype = "dotted", colour = "grey"), legend.position="bottom")
blank3 <- blank2xy  + scale_y_continuous(trans = "log10", breaks = c(0, 1, 10, 100, 1000, 10000, 100000, 1000000), labels = trans_format("log10", math_format(10^.x))) 
blankViolin <- blank3  + geom_violin(adjust = .2, scale = "width",trim=TRUE, position = position_dodge(1), alpha = .5, aes(color=Germ), linetype= "blank")  
blankViolinBox <- blankViolin + geom_boxplot(notch = FALSE, position = position_dodge(1), alpha = .1, outlier.colour = "red", outlier.shape = 13, outlier.size = 3, na.rm	= TRUE) 
blankViolinBoxMean <- blankViolinBox + stat_summary(fun.y=mean, geom="point", shape = 23, size=3, position = position_dodge(1), alpha=0.65) 
return(blankViolinBoxMean)
}
# e.g.: He.Plot2(SelData, Germ, Isolate, PlotTitle="Line 1\n Line 2", yla="Eggs per plant", xla="Isolate")
# function for ploting one factor (Isolate, "Isolate" must match with the column name)
He.Plot.Iso<-function(SData, Isolate, PlotTitle, yla, xla){
SelDatagrouped <- group_by(SData, Isolate)
SelDataFramed <- as.data.frame(SelDatagrouped)
SelDataFramed$Isolate <- as.factor(SelDataFramed$Isolate)
SelDataFramedPlusOne <- SelDataFramed 
SelDataFramedPlusOne$EggsP <- SelDataFramedPlusOne$EggsP+1
blank <- ggplot(SelDataFramedPlusOne, aes(x =Isolate , y = EggsP, fill = Isolate)) + theme_classic()
blank2 <- blank + labs(title= PlotTitle, y= yla, x= xla) 
blank2xy <- blank2 + theme(panel.grid.major.y = element_line(linetype = "dashed", colour = "grey90"), panel.grid.major.x = element_line(linetype = "dotted", colour = "grey90"), panel.grid.minor.x = element_line(linetype = "dotted", colour = "grey"), legend.position="bottom")
blank3 <- blank2xy  + scale_y_continuous(trans = "log10", breaks = c(0, 1, 10, 100, 1000, 10000, 100000, 1000000), labels = trans_format("log10", math_format(10^.x))) 
blankViolin <- blank3  + geom_violin(adjust = .2, scale = "width",trim=TRUE, position = position_dodge(1), alpha = .5, aes(color=Germ), linetype= "blank")  
blankViolinBox <- blankViolin + geom_boxplot(notch = FALSE, position = position_dodge(1), alpha = .1, outlier.colour = "red", outlier.shape = 13, outlier.size = 3, na.rm	= TRUE) 
blankViolinBoxMean <- blankViolinBox + stat_summary(fun.y=mean, geom="point", shape = 23, size=3, position = position_dodge(1), alpha=0.65) 
return(blankViolinBoxMean)
}
# e.g.: He.Plot.Iso(DataGerm.EC, Isolate, PlotTitle="Line 1\n Line 2", yla="Eggs per plant", xla="Isolate")
# function for ploting one factor (Germ, "Germ" must match with the column name)
He.Plot.Germ<-function(SData, Germ, PlotTitle, yla, xla){
    SelDatagrouped <- group_by(SData, Germ)
    SelDataFramed <- as.data.frame(SelDatagrouped)
    SelDataFramed$Germ <- as.factor(SelDataFramed$Germ)
    SelDataFramedPlusOne <- SelDataFramed 
    SelDataFramedPlusOne$EggsP <- SelDataFramedPlusOne$EggsP+1
blank <- ggplot(SelDataFramedPlusOne, aes(x =Germ , y = EggsP, fill = Germ)) + theme_classic()
blank2 <- blank + labs(title= PlotTitle, y= yla, x= xla) 
blank2xy <- blank2 + theme(panel.grid.major.y = element_line(linetype = "dashed", colour = "grey90"), panel.grid.major.x = element_line(linetype = "dotted", colour = "grey90"), panel.grid.minor.x = element_line(linetype = "dotted", colour = "grey"), legend.position="bottom")
blank3 <- blank2xy  + scale_y_continuous(trans = "log10", breaks = c(0, 1, 10, 100, 1000, 10000, 100000, 1000000), labels = trans_format("log10", math_format(10^.x))) 
blankViolin <- blank3  + geom_violin(adjust = .2, scale = "width",trim=TRUE, position = position_dodge(1), alpha = .5, aes(color=Germ), linetype= "blank")  
blankViolinBox <- blankViolin + geom_boxplot(notch = FALSE, position = position_dodge(1), alpha = .1, outlier.colour = "red", outlier.shape = 13, outlier.size = 3, na.rm	= TRUE) 
blankViolinBoxMean <- blankViolinBox + stat_summary(fun.y=mean, geom="point", shape = 23, size=3, position = position_dodge(1), alpha=0.65) 
  return(blankViolinBoxMean)
}
# e.g.: He.Plot.Germ(DataIsolate.MIAd, Germ, PlotTitle="Line 1\n Line 2", yla="Eggs per plant", xla="Germplasm")

#### Function to print tables ####
He.Ptable <- function(HeTable){
print(xtable(HeTable),include.rownames=FALSE,caption.placement = "top", sanitize.text.function= identity, floating=FALSE) }

#### Function to print resume table, data must be already in 3 columns and grouped by factors ####
# SelData <- dplyr::select(mydata, Germ, Isolate, EggsP)
# SelDatagrouped <- group_by(SelData, Germ, Isolate)

He.Res.table <- function(SeData, VarF1, VarF2, VarR){

colnames(SeData) <- c("Factor1", "Factor2", "Resp")
Factor1V <- unique(SeData$Factor1) # imporant for all loops
Factor2V <- unique(SeData$Factor2)
Factor1df <- data.frame(Factor1V)
Factor2df <- data.frame(Factor2V)
NumGerm <- nrow(Factor1df)
NumIsolate <- nrow(Factor2df)
SDataFramed3 <- as.data.frame(SeData)

SummTable <- summaryBy(Resp ~ Factor1 + Factor2, data = SDataFramed3, FUN = c(length, mean, se), keep.names=TRUE)
SummTable$Resp.mean <- round_df(SummTable$Resp.mean,0)
SummTable$Resp.se <- round_df(SummTable$Resp.se,0)
pm <- ("$\\pm$")
SummTable$Mean.Se <- paste(SummTable$Resp.mean,pm, SummTable$Resp.se)
SummTableMeanSe <- dplyr::select(SummTable, Factor1, Factor2, Mean.Se)

nn<-reshape(SummTableMeanSe,timevar="Factor1",idvar="Factor2",direction="wide")
colnames(nn) <- c("VarF2", c(unique(Factor1V)))
nn[is.na(nn)]<-0
ResumeTable <- nn

 return(ResumeTable)
}


#  e.g.: He.Res.table(SelDatagroup, Germ, Isolate, EggsP)



########################################## Load data ##################################
#### set working directory ####
setwd("H:/OneDrive/R/GitHub/R2") 

##### Read excel table ####
mydata <- read_excel("2016-Solanum-01-11_Isolates(Germplasms).xlsx") 

#### Important Variables ####
SelData <- dplyr::select(mydata, Germ, Isolate, EggsP)
SelDatagrouped <- group_by(SelData, Germ, Isolate)

Factor1GermV <- unique(SelDatagrouped$Germ) # imporant for all loops
Factor2IsolateV <- unique(SelDatagrouped$Isolate)
Factor1Germdf <- data.frame(Factor1GermV)
Factor2Isolatedf <- data.frame(Factor2IsolateV)
NumGerm <- nrow(Factor1Germdf)
NumIsolate <- nrow(Factor2Isolatedf)






##### Create subsets in Loop ####
for(i in 1:NumGerm) { 
    assign(paste("DataGerm", Factor1GermV[i], sep = "."), data.frame(filter(SelDatagrouped,  Germ ==  Factor1GermV[i])))
} 
for(i in 1:NumIsolate) { 
    assign(paste("DataIsolate", Factor2IsolateV[i], sep = "."), data.frame(filter(SelDatagrouped,  Isolate ==  Factor2IsolateV[i])))
} 
#### create Data sets of tukey and Dunn tests with per isolate ####
for(i in 1:NumIsolate) { 
    Tempdata <- data.frame(filter(SelDatagrouped, Isolate == Factor2IsolateV[i]))
    TempTtuk <- He.Tukey(Tempdata$EggsP, Tempdata$Germ)
   assign(paste("TukLoopIso", Factor2IsolateV[i], sep = "."), data.frame(TempTtuk))
} 
for(i in 1:NumIsolate) { 
    Tempdata <- data.frame(filter(SelDatagrouped, Isolate == Factor2IsolateV[i]))
    TempDunn <- He.Dunn(Tempdata$EggsP, Tempdata$Germ)
   assign(paste("DunnLoopIso", Factor2IsolateV[i], sep = "."), data.frame(TempDunn))
} 


# create Data sets of tukey and Dunn tests with per Germplasm

for(i in 1:NumGerm) { 
    Tempdata <- data.frame(filter(SelDatagrouped, Germ == Factor1GermV[i]))
    TempTtuk <- He.Tukey(Tempdata$EggsP, Tempdata$Isolate)
   assign(paste("TukLoopGerm", Factor1GermV[i], sep = "."), data.frame(TempTtuk))
} 

for(i in 1:NumGerm) { 
    Tempdata <- data.frame(filter(SelDatagrouped, Germ == Factor1GermV[i]))
    TempDunn <- He.Dunn(Tempdata$EggsP, Tempdata$Isolate)
   assign(paste("DunnLoopGerm", Factor1GermV[i], sep = "."), data.frame(TempDunn))
} 

### create loop for Plots

for(i in 1:NumGerm) { 
    Tempdata <- data.frame(filter(SelDatagrouped, Germ == Factor1GermV[i]))
    TempPlot <- He.Plot.Iso(Tempdata, Isolate, PlotTitle=Factor1GermV[i], yla="Eggs per plant", xla="Isolate")
    assign(paste("PlotLoopGerm", Factor1GermV[i], sep = "."), TempPlot)
}
for(i in 1:NumIsolate) { 
    Tempdata <- data.frame(filter(SelDatagrouped, Isolate == Factor2IsolateV[i]))
    TempPlot <- He.Plot.Germ(Tempdata, Germ, PlotTitle=Factor2IsolateV[i], yla="Eggs per plant", xla="Germplasm")
    assign(paste("PlotLoopIso", Factor2IsolateV[i], sep = "."), TempPlot)
}

SelDatagrouped <- group_by(SelData, Germ, Isolate)
SelDataFramed2 <- as.data.frame(SelDatagrouped)
SummTable <- summaryBy(EggsP ~ Isolate + Germ, data = SelDataFramed2, FUN = c(length, mean, se), keep.names=TRUE)
SummTable$EggsP.mean <- round_df(SummTable$EggsP.mean,0)
SummTable$EggsP.se <- round_df(SummTable$EggsP.se,0)
pm <- ("$\\pm$")
SummTable$Mean.Se <- paste(SummTable$EggsP.mean,pm, SummTable$EggsP.se)
SummTableMeanSe <- dplyr::select(SummTable, 1, 2,6)
nn<-reshape(SummTableMeanSe,timevar="Germ",idvar="Isolate",direction="wide")
colnames(nn) <- c("Isolate", c(unique(Factor1GermV)))
nn[is.na(nn)]<-0
ResumeTable <- nn



```


First Slide
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Bullet 1
- Bullet 2
- Bullet 3








Slide With Code
========================================================

```{r echo=FALSE}
PlotLoopIso.MJVi
PlotLoopIso.MJTu
```

Slide With Plot
========================================================
type: section

```{r, echo=FALSE}
PlotLoopGerm.EC
```

Slide With Plot 2
========================================================
id: slideplot2
type: prompt

```{r, myplot,echo=FALSE, dpi=90, fig.width=8,fig.height=6}
He.Plot2(SelData, Germ, Isolate, PlotTitle="Line 1\n Line 2", yla="Eggs per plant", xla="Isolate")
```
- [linked phrase](http://example.com)

Slide With Plot 3
========================================================


- [Go to slide 1](#/slideplot2)

- [linked phrase](http://example.com)

